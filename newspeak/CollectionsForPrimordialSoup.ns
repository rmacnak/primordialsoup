Newspeak3
'NS2PrimordialSoup'
class CollectionsForPrimordialSoup usingInternalKernel: ik = (
	|
	public Collection = ik Collection.
	private ArgumentError = ik ArgumentError.
	|
) (
public class List new: capacity <Integer> = Collection (
(* An ordered collection of elements.

Indexing (#at: and #at:put:) happens in constant time. Insertion (#add:, #addLast) and removal (#removeLast:) at the end run in
amortized constant time. Insertion (#addFirst:) and removal (#removeFirst) at the beginning run in linear time. As such, List can be
used as an efficient stack, but an inefficient queue.

nil is a valid element. *)
	|
	protected size_ ::= 0.
	protected data ::= Array new: capacity.
	|
) (
public , other = (
	| result = List new: (self size + other size bitOr: 3). |
	self do: [:element | result addLast: element].
	other do: [:element | result addLast: element].
	^result
)
public add: element <E> ^<E> = (
	^self addLast: element
)
public addAll: collection <Collection[E]> = (
	collection do: [:element | self addLast: element].
)
public addFirst: element <E> ^<E> = (
	| oldData capacity newData |
	oldData:: data.
	capacity:: oldData size.
	size_ >= oldData size
		ifTrue: [data:: newData:: Array new: (capacity >> 1 + capacity bitOr: 7)]
		ifFalse: [newData:: oldData].
	newData replaceFrom: 2 to: 1 + size_ with: oldData startingAt: 1.
	newData at: 1 put: element.
	size_:: size_ + 1.
	^element
)
public addLast: element <E> ^<E> = (
	| capacity = data size. |
	size_ >= capacity ifTrue:
		[data:: data copyWithSize: (capacity >> 1 + capacity bitOr: 7)].
	size_:: size_ + 1.
	data at: size_ put: element.
	^element
)
public asArray ^<Array[E]> = (
	^data copyWithSize: size_
)
public at: index <Integer> ^<E> = (
	index > size_ ifTrue: [^(ArgumentError value: index) signal].
	^data at: index
)
public at: index <Integer> put: value <E> ^<E> = (
	index > size_ ifTrue: [^(ArgumentError value: index) signal].
	^data at: index put: value
)
public do: action <[:E]> = (
	1 to: size_ do: [:index | action value: (data at: index)].
)
public first ^<E> = (
	^self at: 1
)
public include: element <E> ^<E> = (
	1 to: size_ do:
		[:index | (data at: index) = element ifTrue: [^element]].
	^self addLast: element
)
public indexOf: element <E> ^<Integer> = (
	1 to: size_ do: [:index | (data at: index) = element ifTrue: [^index]].
	^0
)
public isEmpty ^<Boolean> = (
	^0 = size_
)
public isKindOfList ^<Boolean> = (
	^true
)
public keysAndValuesDo: action <[:Integer :E]> = (
	1 to: size_ do: [:index | action value: index value: (data at: index)].
)
public last ^<E> = (
	^self at: size
)
protected newForCollectUsingAdd: capacity = (
	^List new: capacity
)
public remove: element <E> ^<E> = (
	^self remove: element ifAbsent: [(NotFound element: element) signal]
)
public remove: element <E> ifAbsent: onAbsent <X def> ^<E | X> = (
	1 to: size_ do:
		[:index |
		(data at: index) = element ifTrue:
			[index to: size_ - 1 do:
				[:j |
				data at: j put: (data at: j + 1)].
			data at: size_ put: nil.
			size_:: size_ - 1.
			^element]].
	^onAbsent value.
)
public removeAllSuchThat: predicate <[:E | Boolean]> = (
	| writeBackIndex ::= 1. |
	1 to: size_ do:
		[:index |
		| element = data at: index. |
		(predicate value: element) ifFalse:
			[data at: writeBackIndex put: element.
			 writeBackIndex:: 1 + writeBackIndex]].
	writeBackIndex to: size_ do:
		[:index | data at: index put: nil].
	size_:: writeBackIndex - 1.
)
public removeFirst ^<E> = (
	| oldFirst |
	0 = size_ ifTrue: [^errorEmpty].
	oldFirst:: data at: 1.
	1 to: size_ - 1 do: [:index | data at: index put: (data at: 1 + index)].
	data at: size_ put: nil.
	size_:: size_ - 1.
	^oldFirst
)
public removeLast ^<E> = (
	| element = self at: size_. |
	data at: size_ put: nil.
	size_:: size_ - 1.
	^element
)
public size ^<Integer> = (
	^size_
)
public sort: lessOrEqual <[:E :E | Boolean]> = (
	data sortFrom: 1 to: size_ by: lessOrEqual.
)
public copyFrom: start <Integer> to: stop <Integer> ^ <List[E]> = (
  | cp <List[E]> contents = data. |
  cp:: List new: (stop - start) + 1.
  1 to: (stop - start) + 1 do: [:i <Integer> | cp add: (contents at: i + start -1)].
  ^cp
)
) : (
public new ^<List[E]> = (
	^self new: 3
)
public withAll: collection <Collection[E]> ^<List[E]> = (
	^(self new: collection size) addAll: collection; yourself
)
)
public class Map new: capacity <Integer> = Collection (
(* A collection associating keys to values.

Lookup (#at:) runs in constant time, and insertion (#at:put:) and removal (#removeKey:) run in amortized constant time, 
provided the #hash of keys is well distributed.

The order of iteration of keys is unspecified except for the following constraints. The iteration order only changes when the map is modified (insertion or removal). The iteration order of values and associations is consistent with the iteration order of keys.

nil is a valid key and a valid value. *)
	|
	protected size_ ::= 0.
	protected table ::= Array new: (capacityFor: capacity).
	|
	1 to: table size by: 2 do: [:index | table at: index put: table].
) (
public at: key <K> ^<V> = (
	^self at: key ifAbsent: [(NotFound element: key) signal]
)
public at: key <K> ifAbsent: onAbsent <X def> ^<K | X> = (
	| index |
	index:: scanFor: key.
	table = (table at: index) ifTrue: [^onAbsent value].
	^table at: 1 + index
)
public at: key <K> ifAbsentPut: valueGenerator <[V]> ^<V> = (
	| index |
	index:: scanFor: key.
	table = (table at: index) ifTrue:
		[ | value = valueGenerator value. |
		 table at: index put: key.
		 table at: 1 + index put: value.
		 self incrementSize.
		 ^value].
	^table at: 1 + index
)
public at: key <K> put: value <V> ^<V> = (
	| index |
	index:: scanFor: key.
	table at: 1 + index put: value.
	table = (table at: index) ifTrue:
		[table at: index put: key.
		 self incrementSize].
	^value
)
private capacityFor: numElements <Integer> = (
	numElements < 0 ifTrue: [^ArgumentError value: numElements].
	(* + 1 for an empty slot to terminate probing *)
	(* * 4 // 3 for 75% load factor *)
	(* << 1 for flattened association *)
	^numElements + 1 * 4 // 3 << 1
)
public collect: transform <[:V | W]> ^<Map[K, W]> = (
	| result = Map new: size_. |
	1 to: table size by: 2 do: [:index |
		| key |
		table = (key:: table at: index) ifFalse:
			[result at: key put: (transform value: (table at: 1 + index))]].
	^result
)
public do: action <[:V]> = (
	1 to: table size by: 2 do: [:index |
		table = (table at: index) ifFalse:
			[action value: (table at: 1 + index)]].
)
fixCollisionsAfter: start <Integer> = (
	| index ::= start. key |
	[index:: index + 1 \\ table size + 1.
	 key:: table at: index.
	 table = key] whileFalse:
		[ | newIndex = self scanFor: key. |
		 newIndex = index ifFalse:
			[table at: newIndex put: key.
			 table at: 1 + newIndex put: (table at: 1 + index).
			 table at: index put: table.
			 table at: 1 + index put: nil]].
)
public includesKey: key <K> ^<Boolean> = (
	^(table = (table at: (scanFor: key))) not
)
incrementSize = (
	| oldTable newTable |
	size_:: 1 + size_.
	(table size * 3) >= (size_ * 8) ifTrue: [^self]. (* 75% load factor *)

	oldTable:: table.
	table:: newTable:: Array new: oldTable size << 1.
	1 to: newTable size by: 2 do:
		[:newIndex | newTable at: newIndex put: newTable].
	1 to: oldTable size by: 2 do: [:oldIndex |
		| key = oldTable at: oldIndex. |
		oldTable = key ifFalse:
			[ | newIndex = scanForEmptySlotFor: key. |
			newTable at: newIndex put: key.
			newTable at: (1 + newIndex) put: (oldTable at: 1 + oldIndex)]].
)
public isEmpty ^<Boolean> = (
	^0 = size_
)
public isKindOfMap ^<Boolean> = (
	^true
)
public keys ^<Set[K]> = (
	| result = Set new. |
	1 to: table size by: 2 do: [:index |
		| key = table at: index. |
		table = key ifFalse: [result add: key]].
	^result
)
public keysAndValuesDo: action <[:K :V]> = (
	1 to: table size by: 2 do: [:index |
		| key = table at: index. |
		table = key ifFalse:
			[action value: key value: (table at: 1 + index)]].
)
public reject: predicate <[:V | Boolean]> ^<Map[K, V]> = (
	| result = Map new: size_. |
	1 to: table size by: 2 do: [:index |
		| key |
		table = (key:: table at: index) ifFalse:
			[ | value = table at: 1 + index. |
			(predicate value: value) ifFalse:
				[result at: key put: value]]].
	^result
)
public removeKey: key <K> ^<V> = (
	^self removeKey: key ifAbsent: [(NotFound element: key) signal]
)
public removeKey: key <K> ifAbsent: onAbsent <[X def]> ^<V | X> = (
	| index oldValue |
	index:: scanFor: key.
	table = (table at: index) ifTrue: [^onAbsent value].
	table at: index put: table.
	oldValue:: table at: 1 + index.
	table at: 1 + index put: nil.
	self fixCollisionsAfter: index.
	size_:: size_ - 1.
	^oldValue
)
scanFor: key <K> ^<Integer> = (
	| index start |
	index:: start:: (key hash bitOr: 1) \\ table size.
	[ | element |
	 table = (element:: table at: index) ifTrue: [^index].
	 key = element ifTrue: [^index].
	 (index:: index + 1 \\ table size + 1) = start] whileFalse.
	self errorNoFreeSpace
)
scanForEmptySlotFor: key = (
	| index start |
	index:: start:: (key hash bitOr: 1) \\ table size.
	[table = (table at: index) ifTrue: [^index].
	 (index:: index + 1 \\ table size + 1) = start] whileFalse.
	self errorNoFreeSpace
)
public select: predicate <[:V | Boolean]> ^<Map[K, V]> = (
	| result = Map new: size_. |
	1 to: table size by: 2 do: [:index |
		| key |
		table = (key:: table at: index) ifFalse:
			[ | value = table at: 1 + index. |
			(predicate value: value) ifTrue:
				[result at: key put: value]]].
	^result
)
public size ^<Integer> = (
	^size_
)
public values ^<List[V]> = (
	| result = List new: size_. |
	1 to: table size by: 2 do: [:index |
		table = (table at: index) ifFalse:
			[result add: (table at: 1 + index)]].
	^result
)
) : (
public new ^<Map[K, V]> = (
	^self new: 3
)
)
public class NotFound element: e = Exception (
	|
	public element = e.
	|
) (
public printString = (
	^'NotFound: ', element printString
)
) : (
)
public class Set new: capacity <Integer> = Collection (
(* A collection elements without duplicates.

Lookup (#includes:) runs in constant time, and insertion (#add:) and removal (#remove:) run in amortized constant time, 
provided the #hash of elements is well distributed.

The order of iteration of elements is unspecified except the iteration order only changes when the set is modified (insertion or removal).

nil is a valid element. *)
	|
	protected size_ ::= 0.
	protected table ::= Array new: (capacityFor: capacity).
	|
	1 to: table size do: [:index | table at: index put: table].
) (
public add: element <E> ^<E> = (
	| index entry |
	index:: scanFor: element.
	entry:: table at: index.
	table = entry ifTrue:
		[table at: index put: element.
		 incrementSize].
	^element
)
public addAll: collection <Collection[E]> = (
	collection do: [:element | self add: element].
)
public asArray ^<Array[E]> = (
	| result cursor |
	result:: Array new: size_.
	cursor:: 1.
	1 to: table size do: [:index |
		| entry = table at: index. |
		table = entry ifFalse:
			[result at: cursor put: entry.
			 cursor:: 1 + cursor]].
	^result
)
private capacityFor: numElements <Integer> = (
	numElements < 0 ifTrue: [^ArgumentError value: numElements].
	(* + 1 for an empty slot to terminate probing *)
	(* * 4 // 3 for 75% load factor *)
	^numElements + 1 * 4 // 3
)
public do: action <[:E]> = (
	table do: [:entry | table = entry ifFalse: [action value: entry]].
)
fixCollisionsAfter: start <Integer> = (
	| index ::= start. element |
	[index:: index \\ table size + 1.
	 element:: table at: index.
	 table = element] whileFalse:
		[ | newIndex = self scanFor: element. |
		 newIndex = index ifFalse:
			[table at: newIndex put: element.
			 table at: index put: table]].
)
public include: element <E> ^<E> = (
	^self add: element
)
public include: element <E> ifNew: onNew <[]> ^<E> = (
	| index entry |
	index:: scanFor: element.
	entry:: table at: index.
	table = entry ifTrue:
		[table at: index put: element.
		 incrementSize.
		 onNew value].
	^element
)
public includes: element <E> ^<Boolean> = (
	^(table = (table at: (scanFor: element))) not
)
incrementSize = (
	| oldTable newTable |
	size_:: 1 + size_.
	(table size * 3) >= (size_ * 4) ifTrue: [^self]. (* 75% load factor *)

	oldTable:: table.
	table:: newTable:: Array new: oldTable size << 1.
	1 to: newTable size do: [:index | newTable at: index put: newTable].
	1 to: oldTable size do: [:index |
		| entry = oldTable at: index. |
		oldTable = entry ifFalse:
			[table at: (scanForEmptySlotFor: entry) put: entry]]
)
public isEmpty ^<Boolean> = (
	^0 = size_
)
public isKindOfSet ^<Boolean> = (
	^true
)
protected newForCollectUsingAdd: capacity = (
	^Set new: capacity
)
public remove: element <E> ^<E> = (
	^self remove: element ifAbsent: [(NotFound element: element) signal].
)
public remove: element <E> ifAbsent: onAbsent <[X def]> ^<E | X> = (
	| index entry |
	index:: scanFor: element.
	entry:: table at: index.
	table = entry ifTrue: [^onAbsent value].
	table at: index put: table.
	fixCollisionsAfter: index.
	size_:: size_ - 1.
	^element
)
public removeAll: collection <Collection[E]> = (
	collection do: [:element | self remove: element].
)
public removeAllSuchThat: predicate <[:E | Boolean]> = (
	|
	originalTable = table.
	copyTable = table copy.
	|
	copyTable do: [:entry |
		originalTable = entry ifFalse:
			[(predicate value: entry) ifTrue:
				[self remove: entry]]].
)
scanFor: element <K> ^<Integer> = (
	| index start |
	index:: start:: element hash \\ table size + 1.
	[
		| entry |
		(table = (entry:: table at: index) or: [ element = entry ])
			ifTrue: [ ^index ].
		(index:: index \\ table size + 1) = start ] whileFalse.
	self errorNoFreeSpace
)
scanForEmptySlotFor: key = (
	| index start |
	index:: start:: key hash \\ table size + 1.
	[
		table = (table at: index) ifTrue: [ ^index ].
		(index:: index \\ table size + 1) = start] whileFalse.
	self errorNoFreeSpace
)
public size ^<Integer> = (
	^size_
)
) : (
public new ^<Set[E]> = (
	^self new: 2
)
public withAll: collection <Collection[E]> ^<Set[E]> = (
	^(self new: collection size) addAll: collection; yourself
)
)
public IdentityMap = (
	^Map
)
public IdentitySet = (
	^Set
)
) : (
)
