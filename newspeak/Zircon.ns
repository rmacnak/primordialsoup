(* Access to Zircon primitives such as channels and VMOs. *)
(* :exemplar: platform zircon *)
class Zircon usingPlatform: p internalKernel: ik = (
|
private ArgumentError = p kernel ArgumentError.
private multipleReturn = Array new: 4.
private messageLoop = ik messageLoop.
|) (
public class Channel handle: h = ZirconObject handle: h (|
private onReadable_
private onClose_
|) (
public onClose: action = (
	onReadable_:: action.
	await: CHANNEL_READABLE | CHANNEL_PEER_CLOSED.
)
public onReadable: action = (
	onReadable_:: action.
	await: CHANNEL_READABLE | CHANNEL_PEER_CLOSED.
)
protected onStatus: status signals: pending count: count = (
	OK = status ifFalse:
		[close. ^self].
	0 = (CHANNEL_READABLE & pending) ifFalse:
		[onReadable_ value. ^self].
	0 = (CHANNEL_PEER_CLOSED & pending) ifFalse:
		[onClose_ value. ^self].
)
private rawRead: channel <Integer> multipleReturn: _ <Array> = (
	(* :pragma: primitive: 275 *)
	^(ArgumentError value: nil) signal
)
private rawWrite: channel <Integer> bytes: bytes <ByteArray> handles: handles <Array> multipleReturn: _ <Array> = (
	(* :pragma: primitive: 276 *)
	^(ArgumentError value: nil) signal
)
public read ^<Message> = (
	| handles |
	checkStatus: (rawRead: handle multipleReturn: multipleReturn).
	handles:: multipleReturn at: 2.
	1 to: handles size do:
		[:index | handles at: index put: (ZirconObject handle: (handles at: index))].
	^Message bytes: (multipleReturn at: 1) handles: handles
)
public write: message <Message> = (
	checkStatus:
		(rawWrite: handle
		 bytes: message bytes
		 handles: (message handles collect: [:zxobject | zxobject takeHandle])
		 multipleReturn: multipleReturn).
)
) : (
public new = (
	checkStatus: (rawCreate: 0 multipleReturn: multipleReturn).
	^{ self handle: (multipleReturn at: 1). self handle: (multipleReturn at: 2) }
)
private rawCreate: options <Integer> multipleReturn: _ <Array> = (
	(* :pragma: primitive: 274 *)
	^(ArgumentError value: options) signal
)
)
public class Message bytes: b handles: h = (
|
public bytes <ByteArray> = b.
public handles <Array[ZirconObject]> = h.
|
) (
) : (
)
public class Socket handle: h = ZirconObject handle: h (
) (
) : (
)
public class VMO handle: h = ZirconObject handle: h (
) (
private rawGetSize: handle <Integer> multipleReturn: _ <Array> = (
	(* :pragma: primitive: 278 *)
	panic.
)
private rawRead: handle <Integer> size: readSize offset: offset multipleReturn: _ <Array> = (
	(* :pragma: primitive: 280 *)
	^(ArgumentError value: readSize) signal
)
private rawSetSize: handle <Integer> size: newSize multipleReturn: _ <Array> = (
	(* :pragma: primitive: 279 *)
	^(ArgumentError value: newSize) signal
)
private rawWrite: handle <Integer> bytes: bytes offset: offset multipleReturn: _ <Array> = (
	(* :pragma: primitive: 281 *)
	^(ArgumentError value: bytes) signal
)
public read: numBytes from: vmoOffset = (
	checkStatus: (rawRead: handle size: numBytes offset: vmoOffset multipleReturn: multipleReturn).
	^multipleReturn at: 1
)
public size ^<Integer> = (
	checkStatus: (rawGetSize: handle multipleReturn: multipleReturn).
	^multipleReturn at: 1
)
public size: newSize <Integer> = (
	checkStatus: (rawSetSize: handle size: newSize multipleReturn: multipleReturn).
)
public write: bytes <ByteArray> to: vmoOffset = (
	checkStatus: (rawWrite: handle bytes: bytes offset: vmoOffset multipleReturn: multipleReturn).
)
) : (
public new: size = (
    ^self new: size options: 0
)
public new: size options: options = (
	checkStatus: (rawNew: size options: options multipleReturn: multipleReturn).
	^self handle: (multipleReturn at: 1)
)
private rawNew: size <Integer> options: options <Integer> multipleReturn: _ <Array> = (
	(* :pragma: primitive: 277 *)
	^(ArgumentError value: size) signal
)
)
public class ZirconException status: s = Exception (
|
public status <Integer> = s.
|
) (
public printString ^<String> = (
	^'ZirconException: ', (statusGetString: status), ', ', status printString
)
private statusGetString: status = (
	(* :pragma: primitive: 272 *)
	panic
)
) : (
)
class ZirconObject handle: h = (
|
protected handle ::= h.
protected waiter ::= 0.
|
) (
protected await: signals = (
	0 = waiter ifFalse: [rawCancelWait: waiter].
	messageLoop handleMap at: handle put:
		[:status :pending :count | onStatus: status signals: pending count: count].
	waiter:: rawAwait: handle signals: signals.
)
public close = (
	0 = waiter ifFalse: [rawCancelWait: waiter].
	rawClose: handle.
	handle:: HANDLE_INVALID.
)
protected onStatus: status signals: pending count: count = (
)
private rawAwait: h signals: s = (
	(* :pragma: primitive: 190 *)
	panic
)
private rawCancelWait: waitId = (
	(* :pragma: primitive: 191 *)
	panic
)
private rawClose: handle <Integer> = (
	(* :pragma: primitive: 273 *)
	panic
)
public takeHandle ^<Integer> = (
	| result = handle. |
	handle:: HANDLE_INVALID.
	^result
)
) : (
)
public CHANNEL_PEER_CLOSED = ( ^1 << 2 )
public CHANNEL_READABLE = ( ^1 << 0 )
public CHANNEL_WRITABLE = ( ^1 << 1 )
public ERR_BAD_HANDLE = ( ^-11 )
public ERR_OUT_OF_RANGE = ( ^-14 )
public ERR_PEER_CLOSED = ( ^-24 )
public ERR_SHOULD_WAIT = ( ^-22 )
public ERR_UNAVAILABLE = ( ^-28 )
public ERR_WRONG_TYPE = ( ^-12 )
public HANDLE_INVALID = ( ^0 )
public OK = ( ^0 )
public VMO_RESIZABLE = ( ^1 << 1 )
private checkStatus: status = (
	OK = status ifFalse: [^(ZirconException status: status) signal].
)
private panic = (
	(* :pragma: primitive: 187 *)
)
) : (
)
