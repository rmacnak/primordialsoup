# Copyright (c) 2017, the Newspeak project authors. Please see the AUTHORS file
# for details. All rights reserved. Use of this source code is governed by a
# BSD-style license that can be found in the LICENSE file.

import("//build/components.gni")

executable("vm") {
  output_name = "primordialsoup"

  include_dirs = [ "." ]

  if (is_fuchsia) {
    libs = [ "zircon" ]
    deps = [
      "//sdk/lib/fdio",
      "//zircon/system/ulib/async:async-cpp",
      "//zircon/system/ulib/async-loop:async-loop-cpp",
    ]
  } else {
    libs = [ "pthread" ]
  }

  if (is_debug) {
    defines = [ "DEBUG" ]
  } else {
    defines = [ "NDEBUG" ]
  }

  configs += [ "//build/config:Wno-conversion" ]

  sources = [
    "double-conversion/bignum-dtoa.cc",
    "double-conversion/bignum-dtoa.h",
    "double-conversion/bignum.cc",
    "double-conversion/bignum.h",
    "double-conversion/cached-powers.cc",
    "double-conversion/cached-powers.h",
    "double-conversion/diy-fp.h",
    "double-conversion/double-conversion.h",
    "double-conversion/double-to-string.cc",
    "double-conversion/double-to-string.h",
    "double-conversion/fast-dtoa.cc",
    "double-conversion/fast-dtoa.h",
    "double-conversion/fixed-dtoa.cc",
    "double-conversion/fixed-dtoa.h",
    "double-conversion/ieee.h",
    "double-conversion/string-to-double.cc",
    "double-conversion/string-to-double.h",
    "double-conversion/strtod.cc",
    "double-conversion/strtod.h",
    "double-conversion/utils.h",
    "vm/allocation.h",
    "vm/assert.cc",
    "vm/assert.h",
    "vm/bitfield.h",
    "vm/double_conversion.cc",
    "vm/double_conversion.h",
    "vm/flags.h",
    "vm/globals.h",
    "vm/heap.cc",
    "vm/heap.h",
    "vm/interpreter.cc",
    "vm/interpreter.h",
    "vm/isolate.cc",
    "vm/isolate.h",
    "vm/large_integer.cc",
    "vm/lockers.h",
    "vm/lookup_cache.cc",
    "vm/lookup_cache.h",
    "vm/main.cc",
    "vm/main_emscripten.cc",
    "vm/math.h",
    "vm/message_loop.cc",
    "vm/message_loop.h",
    "vm/message_loop_emscripten.cc",
    "vm/message_loop_emscripten.h",
    "vm/message_loop_epoll.cc",
    "vm/message_loop_epoll.h",
    "vm/message_loop_fuchsia.cc",
    "vm/message_loop_fuchsia.h",
    "vm/message_loop_iocp.cc",
    "vm/message_loop_iocp.h",
    "vm/message_loop_kqueue.cc",
    "vm/message_loop_kqueue.h",
    "vm/object.cc",
    "vm/object.h",
    "vm/os.h",
    "vm/os_android.cc",
    "vm/os_emscripten.cc",
    "vm/os_fuchsia.cc",
    "vm/os_linux.cc",
    "vm/os_macos.cc",
    "vm/os_win.cc",
    "vm/port.cc",
    "vm/port.h",
    "vm/primitives.cc",
    "vm/primitives.h",
    "vm/random.h",
    "vm/snapshot.cc",
    "vm/snapshot.h",
    "vm/thread.h",
    "vm/thread_emscripten.cc",
    "vm/thread_pool.h",
    "vm/thread_posix.cc",
    "vm/thread_win.cc",
    "vm/utils.h",
    "vm/virtual_memory.h",
    "vm/virtual_memory_emscripten.cc",
    "vm/virtual_memory_fuchsia.cc",
    "vm/virtual_memory_posix.cc",
    "vm/virtual_memory_win.cc",
  ]
}

hello_snapshot = "$target_out_dir/HelloApp.vfuel"
tests_snapshot = "$target_out_dir/TestRunner.vfuel"
benchmarks_snapshot = "$target_out_dir/BenchmarkRunner.vfuel"
compiler_snapshot = "$target_out_dir/CompilerApp.vfuel"

action("snapshots") {
  deps = [
    ":vm($host_toolchain)",
  ]

  newspeak_sources = [
    "newspeak/AccessModifierTesting.ns",
    "newspeak/AccessModifierTestingConfiguration.ns",
    "newspeak/ActivationMirrorTesting.ns",
    "newspeak/ActivationMirrorTestingConfiguration.ns",
    "newspeak/Actors.ns",
    "newspeak/ActorsTesting.ns",
    "newspeak/ActorsTestingConfiguration.ns",
    "newspeak/BenchmarkRunner.ns",
    "newspeak/ClosureDefFibonacci.ns",
    "newspeak/ClosureFibonacci.ns",
    "newspeak/Collections.ns",
    "newspeak/CollectionsTesting.ns",
    "newspeak/CollectionsTestingConfiguration.ns",
    "newspeak/CompilerApp.ns",
    "newspeak/DeltaBlue.ns",
    "newspeak/Formatter.ns",
    "newspeak/HelloApp.ns",
    "newspeak/InImageNSCompilerTestingStrategy.ns",
    "newspeak/Intermediates.ns",
    "newspeak/JS.ns",
    "newspeak/JSON.ns",
    "newspeak/JSONTesting.ns",
    "newspeak/JSONTestingConfiguration.ns",
    "newspeak/JSTesting.ns",
    "newspeak/JSTestingConfiguration.ns",
    "newspeak/Kernel.ns",
    "newspeak/KernelForPrimordialSoup.ns",
    "newspeak/KernelTests.ns",
    "newspeak/KernelTestsConfiguration.ns",
    "newspeak/KernelWeakTests.ns",
    "newspeak/KernelWeakTestsConfiguration.ns",
    "newspeak/MethodFibonacci.ns",
    "newspeak/Minitest.ns",
    "newspeak/MinitestTests.ns",
    "newspeak/MinitestTestsConfiguration.ns",
    "newspeak/MirrorBuilderTesting.ns",
    "newspeak/MirrorBuilderTestingConfiguration.ns",
    "newspeak/MirrorTesting.ns",
    "newspeak/MirrorTestingConfiguration.ns",
    "newspeak/MirrorTestingModel.ns",
    "newspeak/Mirrors.ns",
    "newspeak/NLRImmediate.ns",
    "newspeak/NLRLoop.ns",
    "newspeak/NS2PrimordialSoupCompilerTestingConfiguration.ns",
    "newspeak/NSCompilerTesting.ns",
    "newspeak/Newspeak2PrimordialSoupCompilation.ns",
    "newspeak/NewspeakASTs.ns",
    "newspeak/NewspeakCompilation.ns",
    "newspeak/NewspeakPredictiveParsing.ns",
    "newspeak/ParserCombinators.ns",
    "newspeak/Random.ns",
    "newspeak/RandomTests.ns",
    "newspeak/RandomTestsConfiguration.ns",
    "newspeak/Richards.ns",
    "newspeak/Runtime.ns",
    "newspeak/RuntimeWithMirrors.ns",
    "newspeak/Serialization.ns",
    "newspeak/SerializationTestApp.ns",
    "newspeak/SerializationTestStruct.ns",
    "newspeak/SerializationTesting.ns",
    "newspeak/SerializationTestingConfiguration.ns",
    "newspeak/SlotRead.ns",
    "newspeak/SlotWrite.ns",
    "newspeak/Splay.ns",
    "newspeak/TestActor.ns",
    "newspeak/TestRunner.ns",
    "newspeak/Time.ns",
    "newspeak/TimeTests.ns",
    "newspeak/TimeTestsConfiguration.ns",
    "newspeak/VictoryFuelToV8Profile.ns",
    "newspeak/Zircon.ns",
    "newspeak/ZirconTesting.ns",
    "newspeak/ZirconTestingConfiguration.ns",
  ]
  rebased_newspeak_sources = []
  foreach(newspeak_source, newspeak_sources) {
    rebased_newspeak_sources += [ rebase_path(newspeak_source) ]
  }

  bootstrap_compiler_snapshot = rebase_path("snapshots/compiler.vfuel")

  inputs = newspeak_sources + [ bootstrap_compiler_snapshot ]

  outputs = [
    hello_snapshot,
    tests_snapshot,
    benchmarks_snapshot,
    compiler_snapshot,
  ]

  host_vm_dir = get_label_info(":vm($host_toolchain)", "root_out_dir")
  host_vm = rebase_path("$host_vm_dir/primordialsoup")

  script = host_vm
  args = [ bootstrap_compiler_snapshot ]
  args += rebased_newspeak_sources
  args += [
    "Runtime",
    "HelloApp",
    rebase_path(hello_snapshot),

    "RuntimeWithMirrors",
    "TestRunner",
    rebase_path(tests_snapshot),

    "Runtime",
    "BenchmarkRunner",
    rebase_path(benchmarks_snapshot),

    "RuntimeWithMirrors",
    "CompilerApp",
    rebase_path(compiler_snapshot),
  ]
}

resource("hello_snapshot") {
  deps = [ ":snapshots" ]
  sources = [ rebase_path(hello_snapshot) ]
  outputs = [ "data/{{source_file_part}}" ]
}

fuchsia_package_with_single_component("hello-app") {
  deps = [
    ":hello_snapshot",
    ":vm",
  ]
  manifest = "meta/hello-app.cmx"
}

resource("tests_snapshot") {
  deps = [ ":snapshots" ]
  sources = [ rebase_path(tests_snapshot) ]
  outputs = [ "data/{{source_file_part}}" ]
}

fuchsia_package_with_single_component("test-runner") {
  deps = [
    ":tests_snapshot",
    ":vm",
  ]
  manifest = "meta/test-runner.cmx"
}

resource("benchmarks_snapshot") {
  deps = [ ":snapshots" ]
  sources = [ rebase_path(benchmarks_snapshot) ]
  outputs = [ "data/{{source_file_part}}" ]
}

fuchsia_package_with_single_component("benchmark-runner") {
  deps = [
    ":benchmarks_snapshot",
    ":vm",
  ]
  manifest = "meta/benchmark-runner.cmx"
}

resource("compiler_snapshot") {
  deps = [ ":snapshots" ]
  sources = [ rebase_path(compiler_snapshot) ]
  outputs = [ "data/{{source_file_part}}" ]
}

fuchsia_package_with_single_component("compiler-app") {
  deps = [
    ":compiler_snapshot",
    ":vm",
  ]
  manifest = "meta/compiler-app.cmx"
}

group("packages") {
  deps = [
    ":hello-app",
    ":test-runner",
    ":benchmark-runner",
    ":compiler-app",
  ]
}
